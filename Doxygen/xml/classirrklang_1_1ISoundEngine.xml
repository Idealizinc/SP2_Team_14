<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="classirrklang_1_1ISoundEngine" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>irrklang::ISoundEngine</compoundname>
    <basecompoundref refid="classirrklang_1_1IRefCounted" prot="public" virt="virtual">irrklang::IRefCounted</basecompoundref>
    <includes refid="ik__ISoundEngine_8h" local="no">ik_ISoundEngine.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1ad815d525d837732ae744ec620b55d242" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const char *</type>
        <definition>virtual const char* irrklang::ISoundEngine::getDriverName</definition>
        <argsstring>()=0</argsstring>
        <name>getDriverName</name>
        <briefdescription>
<para>returns the name of the sound driver, like &apos;ALSA&apos; for the alsa device </para>        </briefdescription>
        <detaileddescription>
<para>Possible returned strings are &quot;NULL&quot;, &quot;ALSA&quot;, &quot;CoreAudio&quot;, &quot;winMM&quot;, &quot;DirectSound&quot; and &quot;DirectSound8&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> *</type>
        <definition>virtual ISound* irrklang::ISoundEngine::play2D</definition>
        <argsstring>(const char *soundFileName, bool playLooped=false, bool startPaused=false, bool track=false, E_STREAM_MODE streamMode=ESM_AUTO_DETECT, bool enableSoundEffects=false)=0</argsstring>
        <name>play2D</name>
        <param>
          <type>const char *</type>
          <declname>soundFileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>playLooped</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>startPaused</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>track</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06e" kindref="member">E_STREAM_MODE</ref></type>
          <declname>streamMode</declname>
          <defval><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06ea9ccdf79afdb2961edf97edf4575d1717" kindref="member">ESM_AUTO_DETECT</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enableSoundEffects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>loads a sound source (if not loaded already) from a file and plays it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename of sound, like &quot;sounds/test.wav&quot; or &quot;foobar.ogg&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>playLooped</parametername>
</parameternamelist>
<parameterdescription>
<para>plays the sound in loop mode. If set to &apos;false&apos;, the sound is played once, then stopped and deleted from the internal playing list. Calls to <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> have no effect after such a non looped sound has been stopped automaticly. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPaused</parametername>
</parameternamelist>
<parameterdescription>
<para>starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing parameters before the sound actually plays. Usually you would set this parameter to true, then use the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface to modify some of the sound parameters and then call ISound::setPaused(false); Note: You need to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> when setting this parameter to true and you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> object anymore. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to track the sound. Causes the method to return an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies if the file should be streamed or loaded completely into memory for playing. ESM_AUTO_DETECT sets this to autodetection. Note: if the sound has been loaded or played before into the engine, this parameter has no effect. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableSoundEffects</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to use sound effects such as chorus, distorsions, echo, reverb and similar for this sound. Sound effects can then be controlled via <ref refid="classirrklang_1_1ISound_1a988bb2ccda459ad6aa3264e9a58aa99a" kindref="member">ISound::getSoundEffectControl()</ref>. Only enable if necessary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Only returns a pointer to an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> if the parameters &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true. Note: if this method returns an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> as result, you HAVE to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> after you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface anymore. Otherwise this will cause memory waste. This method also may return 0 altough &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true, if the sound could not be played. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="56" column="1"/>
        <referencedby refid="classSP2__Scene_1a3cd10ebc989e3f3e2f84f59d74b76ef2" compoundref="SP2__Scene_8cpp" startline="960" endline="1095">SP2_Scene::GameState</referencedby>
        <referencedby refid="classSP2__Scene_1a2d81e16b1353a71274ac59b796969cf0" compoundref="SP2__Scene_8cpp" startline="1523" endline="2089">SP2_Scene::Update</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1aef959c10e0a0fd2df68abb1cdacd5893" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> *</type>
        <definition>virtual ISound* irrklang::ISoundEngine::play2D</definition>
        <argsstring>(ISoundSource *source, bool playLooped=false, bool startPaused=false, bool track=false, bool enableSoundEffects=false)=0</argsstring>
        <name>play2D</name>
        <param>
          <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>playLooped</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>startPaused</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>track</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enableSoundEffects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Plays a sound source as 2D sound with its default settings stored in <ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An <ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> object will be created internally when playing a sound the first time, or can be added with <ref refid="classirrklang_1_1ISoundEngine_1a7f5a0aff56ce54d9bbc5fcf6603cf516" kindref="member">getSoundSource()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The sound source, specifiying sound file source and default settings for this file. Use the other <ref refid="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" kindref="member">ISoundEngine::play2D()</ref> overloads if you want to specify a filename string instead of this. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>playLooped</parametername>
</parameternamelist>
<parameterdescription>
<para>plays the sound in loop mode. If set to &apos;false&apos;, the sound is played once, then stopped and deleted from the internal playing list. Calls to <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> have no effect after such a non looped sound has been stopped automaticly. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPaused</parametername>
</parameternamelist>
<parameterdescription>
<para>starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing parameters before the sound actually plays. Usually you would set this parameter to true, then use the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface to modify some of the sound parameters and then call ISound::setPaused(false); Note: You need to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> when setting this parameter to true and you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> object anymore. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to track the sound. Causes the method to return an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableSoundEffects</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to use sound effects such as chorus, distorsions, echo, reverb and similar for this sound. Sound effects can then be controlled via <ref refid="classirrklang_1_1ISound_1a988bb2ccda459ad6aa3264e9a58aa99a" kindref="member">ISound::getSoundEffectControl()</ref>. Only enable if necessary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Only returns a pointer to an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> if the parameters &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true. Note: if this method returns an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> as result, you HAVE to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> after you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface anymore. Otherwise this will cause memory waste. This method also may return 0 altough &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true, if the sound could not be played. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1adb09ecc8f61120ce14d26545ed43d8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> *</type>
        <definition>virtual ISound* irrklang::ISoundEngine::play3D</definition>
        <argsstring>(const char *soundFileName, vec3df pos, bool playLooped=false, bool startPaused=false, bool track=false, E_STREAM_MODE streamMode=ESM_AUTO_DETECT, bool enableSoundEffects=false)=0</argsstring>
        <name>play3D</name>
        <param>
          <type>const char *</type>
          <declname>soundFileName</declname>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>playLooped</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>startPaused</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>track</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06e" kindref="member">E_STREAM_MODE</ref></type>
          <declname>streamMode</declname>
          <defval><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06ea9ccdf79afdb2961edf97edf4575d1717" kindref="member">ESM_AUTO_DETECT</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enableSoundEffects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Loads a sound source (if not loaded already) from a file and plays it as 3D sound. </para>        </briefdescription>
        <detaileddescription>
<para>There is some example code on how to work with 3D sound at <ref refid="index_1sound3d" kindref="member">3D Sound</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename of sound, like &quot;sounds/test.wav&quot; or &quot;foobar.ogg&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> of the 3D sound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>playLooped</parametername>
</parameternamelist>
<parameterdescription>
<para>plays the sound in loop mode. If set to &apos;false&apos;, the sound is played once, then stopped and deleted from the internal playing list. Calls to <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> have no effect after such a non looped sound has been stopped automaticly. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPaused</parametername>
</parameternamelist>
<parameterdescription>
<para>starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing parameters before the sound actually plays. Usually you would set this parameter to true, then use the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface to modify some of the sound parameters and then call ISound::setPaused(false); Note: You need to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> when setting this parameter to true and you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> object anymore. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to track the sound. Causes the method to return an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies if the file should be streamed or loaded completely into memory for playing. ESM_AUTO_DETECT sets this to autodetection. Note: if the sound has been loaded or played before into the engine, this parameter has no effect. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableSoundEffects</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to use sound effects such as chorus, distorsions, echo, reverb and similar for this sound. Sound effects can then be controlled via <ref refid="classirrklang_1_1ISound_1a988bb2ccda459ad6aa3264e9a58aa99a" kindref="member">ISound::getSoundEffectControl()</ref>. Only enable if necessary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Only returns a pointer to an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> if the parameters &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true. Note: if this method returns an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> as result, you HAVE to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> after you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface anymore. Otherwise this will cause memory waste. This method also may return 0 altough &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true, if the sound could not be played. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a06a76e7869221c69a351657e962965ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> *</type>
        <definition>virtual ISound* irrklang::ISoundEngine::play3D</definition>
        <argsstring>(ISoundSource *source, vec3df pos, bool playLooped=false, bool startPaused=false, bool track=false, bool enableSoundEffects=false)=0</argsstring>
        <name>play3D</name>
        <param>
          <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>playLooped</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>startPaused</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>track</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enableSoundEffects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Plays a sound source as 3D sound with its default settings stored in <ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An <ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> object will be created internally when playing a sound the first time, or can be added with <ref refid="classirrklang_1_1ISoundEngine_1a7f5a0aff56ce54d9bbc5fcf6603cf516" kindref="member">getSoundSource()</ref>. There is some example code on how to work with 3D sound <ref refid="index_1sound3d" kindref="member">3D Sound</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The sound source, specifiying sound file source and default settings for this file. Use the other <ref refid="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" kindref="member">ISoundEngine::play2D()</ref> overloads if you want to specify a filename string instead of this. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> of the 3D sound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>playLooped</parametername>
</parameternamelist>
<parameterdescription>
<para>plays the sound in loop mode. If set to &apos;false&apos;, the sound is played once, then stopped and deleted from the internal playing list. Calls to <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> have no effect after such a non looped sound has been stopped automaticly. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPaused</parametername>
</parameternamelist>
<parameterdescription>
<para>starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing parameters before the sound actually plays. Usually you would set this parameter to true, then use the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface to modify some of the sound parameters and then call ISound::setPaused(false); Note: You need to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> when setting this parameter to true and you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> object anymore. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to track the sound. Causes the method to return an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface. See &apos;return&apos; for details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableSoundEffects</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes it possible to use sound effects such as chorus, distorsions, echo, reverb and similar for this sound. Sound effects can then be controlled via <ref refid="classirrklang_1_1ISound_1a988bb2ccda459ad6aa3264e9a58aa99a" kindref="member">ISound::getSoundEffectControl()</ref>. Only enable if necessary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Only returns a pointer to an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> if the parameters &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true. Note: if this method returns an <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> as result, you HAVE to call <ref refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" kindref="member">ISound::drop()</ref> after you don&apos;t need the <ref refid="classirrklang_1_1ISound" kindref="compound">ISound</ref> interface anymore. Otherwise this will cause memory waste. This method also may return 0 altough &apos;track&apos;, &apos;startPaused&apos; or &apos;enableSoundEffects&apos; have been set to true, if the sound could not be played. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a38dbc2f1d49e3127fc4a81a9c1a2f82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::stopAllSounds</definition>
        <argsstring>()=0</argsstring>
        <name>stopAllSounds</name>
        <briefdescription>
<para>Stops all currently playing sounds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a92f1a34edd5bfdde3eaae13212eb4147" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setAllSoundsPaused</definition>
        <argsstring>(bool bPaused=true)=0</argsstring>
        <name>setAllSoundsPaused</name>
        <param>
          <type>bool</type>
          <declname>bPaused</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Pauses or unpauses all currently playing sounds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a7f5a0aff56ce54d9bbc5fcf6603cf516" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
        <definition>virtual ISoundSource* irrklang::ISoundEngine::getSoundSource</definition>
        <argsstring>(const ik_c8 *soundName, bool addIfNotFound=true)=0</argsstring>
        <name>getSoundSource</name>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addIfNotFound</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Gets a sound source by sound name. Adds the sound source as file into the sound engine if not loaded already. </para>        </briefdescription>
        <detaileddescription>
<para>Please note: For performance reasons most <ref refid="classirrklang_1_1ISoundEngine" kindref="compound">ISoundEngine</ref> implementations will not try to load the sound when calling this method, but only when play() is called with this sound source as parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addIfNotFound</parametername>
</parameternamelist>
<parameterdescription>
<para>if &apos;true&apos; adds the sound source to the list and returns the interface to it if it cannot be found in the sound source list. If &apos;false&apos;, returns 0 if the sound source is not in the list and does not modify the list. Default value: true. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the sound source or 0 if not available. Note: Don&apos;t call <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> to this pointer, it will be managed by irrKlang and exist as long as you don&apos;t delete irrKlang or call <ref refid="classirrklang_1_1ISoundEngine_1a82e712f7816f933145690983dbd8be9e" kindref="member">removeSoundSource()</ref>. However, you are free to call <ref refid="classirrklang_1_1IRefCounted_1a737b09ee717069b964a3bd0451690388" kindref="member">grab()</ref> if you want and <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> it then later of course. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a2dd835d9767de26959b520dc491eb3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
        <definition>virtual ISoundSource* irrklang::ISoundEngine::getSoundSource</definition>
        <argsstring>(ik_s32 index)=0</argsstring>
        <name>getSoundSource</name>
        <param>
          <type><ref refid="namespaceirrklang_1af8028b1c477e50d479270611ecb76e92" kindref="member">ik_s32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a sound source by index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the loaded sound source, must by smaller than <ref refid="classirrklang_1_1ISoundEngine_1a788aa75e2872c9b09786303a45de6c58" kindref="member">getSoundSourceCount()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the sound source or 0 if not available. Note: Don&apos;t call <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> to this pointer, it will be managed by irrKlang and exist as long as you don&apos;t delete irrKlang or call <ref refid="classirrklang_1_1ISoundEngine_1a82e712f7816f933145690983dbd8be9e" kindref="member">removeSoundSource()</ref>. However, you are free to call <ref refid="classirrklang_1_1IRefCounted_1a737b09ee717069b964a3bd0451690388" kindref="member">grab()</ref> if you want and <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> it then later of course. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a788aa75e2872c9b09786303a45de6c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1af8028b1c477e50d479270611ecb76e92" kindref="member">ik_s32</ref></type>
        <definition>virtual ik_s32 irrklang::ISoundEngine::getSoundSourceCount</definition>
        <argsstring>()=0</argsstring>
        <name>getSoundSourceCount</name>
        <briefdescription>
<para>Returns amount of loaded sound sources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a4eed0fa6712872e55003b26462e21005" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
        <definition>virtual ISoundSource* irrklang::ISoundEngine::addSoundSourceFromFile</definition>
        <argsstring>(const ik_c8 *fileName, E_STREAM_MODE mode=ESM_AUTO_DETECT, bool preload=false)=0</argsstring>
        <name>addSoundSourceFromFile</name>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06e" kindref="member">E_STREAM_MODE</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06ea9ccdf79afdb2961edf97edf4575d1717" kindref="member">ESM_AUTO_DETECT</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>preload</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Adds sound source into the sound engine as file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the sound file (e.g. &quot;sounds/something.mp3&quot;). You can also use this name when calling <ref refid="classirrklang_1_1ISoundEngine_1adb09ecc8f61120ce14d26545ed43d8ec" kindref="member">play3D()</ref> or <ref refid="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" kindref="member">play2D()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Streaming mode for this sound source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preload</parametername>
</parameternamelist>
<parameterdescription>
<para>If this flag is set to false (which is default) the sound engine will not try to load the sound file when calling this method, but only when play() is called with this sound source as parameter. Otherwise the sound will be preloaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the pointer to the added sound source or 0 if not sucessful because for example a sound already existed with that name. If not successful, the reason will be printed into the log. Note: Don&apos;t call <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> to this pointer, it will be managed by irrKlang and exist as long as you don&apos;t delete irrKlang or call <ref refid="classirrklang_1_1ISoundEngine_1a82e712f7816f933145690983dbd8be9e" kindref="member">removeSoundSource()</ref>. However, you are free to call <ref refid="classirrklang_1_1IRefCounted_1a737b09ee717069b964a3bd0451690388" kindref="member">grab()</ref> if you want and <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> it then later of course. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="190" column="1"/>
        <referencedby refid="classSP2__Scene_1ae7483c042e4a1861b71137f1a564ad7a" compoundref="SP2__Scene_8cpp" startline="102" endline="172">SP2_Scene::Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a686f6a4c8a7e90ec6859436f6ae39707" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
        <definition>virtual ISoundSource* irrklang::ISoundEngine::addSoundSourceFromMemory</definition>
        <argsstring>(void *memory, ik_s32 sizeInBytes, const ik_c8 *soundName, bool copyMemory=true)=0</argsstring>
        <name>addSoundSourceFromMemory</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1af8028b1c477e50d479270611ecb76e92" kindref="member">ik_s32</ref></type>
          <declname>sizeInBytes</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyMemory</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds a sound source into the sound engine as memory source. </para>        </briefdescription>
        <detaileddescription>
<para>Note: This method only accepts a file (.wav, .ogg, etc) which is totally loaded into memory. If you want to add a sound source from decoded plain PCM data in memory, use <ref refid="classirrklang_1_1ISoundEngine_1a69c6ec4704a9b0225fb835319318ee4b" kindref="member">addSoundSourceFromPCMData()</ref> instead. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to be treated as loaded sound file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory chunk, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the virtual sound file (e.g. &quot;sounds/something.mp3&quot;). You can also use this name when calling <ref refid="classirrklang_1_1ISoundEngine_1adb09ecc8f61120ce14d26545ed43d8ec" kindref="member">play3D()</ref> or <ref refid="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" kindref="member">play2D()</ref>. Hint: If you include the extension of the original file like .ogg, .mp3 or .wav at the end of the filename, irrKlang will be able to decide better what file format it is and might be able to start playback faster. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copyMemory</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true which is default, the memory block is copied and stored in the engine, after calling <ref refid="classirrklang_1_1ISoundEngine_1a686f6a4c8a7e90ec6859436f6ae39707" kindref="member">addSoundSourceFromMemory()</ref> the memory pointer can be deleted savely. If set to false, the memory is not copied and the user takes the responsibility that the memory block pointed to remains there as long as the sound engine or at least this sound source exists. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the pointer to the added sound source or 0 if not sucessful because for example a sound already existed with that name. If not successful, the reason will be printed into the log. Note: Don&apos;t call <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> to this pointer, it will be managed by irrKlang and exist as long as you don&apos;t delete irrKlang or call <ref refid="classirrklang_1_1ISoundEngine_1a82e712f7816f933145690983dbd8be9e" kindref="member">removeSoundSource()</ref>. However, you are free to call <ref refid="classirrklang_1_1IRefCounted_1a737b09ee717069b964a3bd0451690388" kindref="member">grab()</ref> if you want and <ref refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" kindref="member">drop()</ref> it then later of course. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a69c6ec4704a9b0225fb835319318ee4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
        <definition>virtual ISoundSource* irrklang::ISoundEngine::addSoundSourceFromPCMData</definition>
        <argsstring>(void *memory, ik_s32 sizeInBytes, const ik_c8 *soundName, SAudioStreamFormat format, bool copyMemory=true)=0</argsstring>
        <name>addSoundSourceFromPCMData</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1af8028b1c477e50d479270611ecb76e92" kindref="member">ik_s32</ref></type>
          <declname>sizeInBytes</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type><ref refid="structirrklang_1_1SAudioStreamFormat" kindref="compound">SAudioStreamFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyMemory</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds a sound source into the sound engine from plain PCM data in memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to be treated as loaded sound file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory chunk, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the virtual sound file (e.g. &quot;sounds/something.mp3&quot;). You can also use this name when calling <ref refid="classirrklang_1_1ISoundEngine_1adb09ecc8f61120ce14d26545ed43d8ec" kindref="member">play3D()</ref> or <ref refid="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" kindref="member">play2D()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copyMemory</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true which is default, the memory block is copied and stored in the engine, after calling <ref refid="classirrklang_1_1ISoundEngine_1a69c6ec4704a9b0225fb835319318ee4b" kindref="member">addSoundSourceFromPCMData()</ref> the memory pointer can be deleted savely. If set to true, the memory is not copied and the user takes the responsibility that the memory block pointed to remains there as long as the sound engine or at least this sound source exists. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the pointer to the added sound source or 0 if not sucessful because for example a sound already existed with that name. If not successful, the reason will be printed into the log. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a1a3542b9d4e1c0a77d7cc9591c3c9321" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
        <definition>virtual ISoundSource* irrklang::ISoundEngine::addSoundSourceAlias</definition>
        <argsstring>(ISoundSource *baseSource, const ik_c8 *soundName)=0</argsstring>
        <name>addSoundSourceAlias</name>
        <param>
          <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
          <declname>baseSource</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
<para>Adds a sound source as alias for an existing sound source, but with a different name or optional different default settings. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful if you want to play multiple sounds but each sound isn&apos;t necessarily one single file. Also useful if you want to or play the same sound using different names, volumes or min and max 3D distances. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The sound source where this sound source should be based on. This sound source will use the baseSource as base to access the file and similar, but it will have its own name and its own default settings. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the new sound source to be added. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the pointer to the added sound source or 0 if not sucessful because for example a sound already existed with that name. If not successful, the reason will be printed into the log. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a82e712f7816f933145690983dbd8be9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::removeSoundSource</definition>
        <argsstring>(ISoundSource *source)=0</argsstring>
        <name>removeSoundSource</name>
        <param>
          <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Removes a sound source from the engine, freeing the memory it occupies. </para>        </briefdescription>
        <detaileddescription>
<para>This will also cause all currently playing sounds of this source to be stopped. Also note that if the source has been removed successfully, the value returned by <ref refid="classirrklang_1_1ISoundEngine_1a788aa75e2872c9b09786303a45de6c58" kindref="member">getSoundSourceCount()</ref> will have been decreased by one. Removing sound sources is only necessary if you know you won&apos;t use a lot of non-streamed sounds again. Sound sources of streamed sounds do not cost a lot of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1ae932ded6ce36b06440433714fd5ef7f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::removeSoundSource</definition>
        <argsstring>(const ik_c8 *name)=0</argsstring>
        <name>removeSoundSource</name>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Removes a sound source from the engine, freeing the memory it occupies. </para>        </briefdescription>
        <detaileddescription>
<para>This will also cause all currently playing sounds of this source to be stopped. Also note that if the source has been removed successfully, the value returned by <ref refid="classirrklang_1_1ISoundEngine_1a788aa75e2872c9b09786303a45de6c58" kindref="member">getSoundSourceCount()</ref> will have been decreased by one. Removing sound sources is only necessary if you know you won&apos;t use a lot of non-streamed sounds again. Sound sources of streamed sounds do not cost a lot of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a1d37141994f73595fc96d5893844925c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::removeAllSoundSources</definition>
        <argsstring>()=0</argsstring>
        <name>removeAllSoundSources</name>
        <briefdescription>
<para>Removes all sound sources from the engine. </para>        </briefdescription>
        <detaileddescription>
<para>This will also cause all sounds to be stopped. Removing sound sources is only necessary if you know you won&apos;t use a lot of non-streamed sounds again. Sound sources of streamed sounds do not cost a lot of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a90b70abaae576b45ee062ea2e4380ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setSoundVolume</definition>
        <argsstring>(ik_f32 volume)=0</argsstring>
        <name>setSoundVolume</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>volume</declname>
        </param>
        <briefdescription>
<para>Sets master sound volume. This value is multiplied with all sounds played. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>0 (silent) to 1.0f (full volume) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a268d7486dfaf4309b29228c501627ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>virtual ik_f32 irrklang::ISoundEngine::getSoundVolume</definition>
        <argsstring>()=0</argsstring>
        <name>getSoundVolume</name>
        <briefdescription>
<para>Returns master sound volume. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1af3e6223435969159ef3b22d0c83d2b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setListenerPosition</definition>
        <argsstring>(const vec3df &amp;pos, const vec3df &amp;lookdir, const vec3df &amp;velPerSecond=vec3df(0, 0, 0), const vec3df &amp;upVector=vec3df(0, 1, 0))=0</argsstring>
        <name>setListenerPosition</name>
        <param>
          <type>const <ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref> &amp;</type>
          <declname>lookdir</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref> &amp;</type>
          <declname>velPerSecond</declname>
          <defval><ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref>(0, 0, 0)</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref> &amp;</type>
          <declname>upVector</declname>
          <defval><ref refid="namespaceirrklang_1a592332840fd1799b7c73bcc4c0c4a5af" kindref="member">vec3df</ref>(0, 1, 0)</defval>
        </param>
        <briefdescription>
<para>Sets the current listener 3d position. </para>        </briefdescription>
        <detaileddescription>
<para>When playing sounds in 3D, updating the position of the listener every frame should be done using this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPosition" kindref="compound">Position</ref> of the camera or listener. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lookdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction vector where the camera or listener is looking into. If you have a camera position and a target 3d point where it is looking at, this would be cam-&gt;getTarget() - cam-&gt;getAbsolutePosition(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velPerSecond</parametername>
</parameternamelist>
<parameterdescription>
<para>The velocity per second describes the speed of the listener and is only needed for doppler effects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upvector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector pointing &apos;up&apos;, so the engine can decide where is left and right. This vector is usually (0,1,0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a7b4f4913148d42ffe80b69979ad25906" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::update</definition>
        <argsstring>()=0</argsstring>
        <name>update</name>
        <briefdescription>
<para>Updates the audio engine. This should be called several times per frame if irrKlang was started in single thread mode. </para>        </briefdescription>
        <detaileddescription>
<para>This updates the 3d positions of the sounds as well as their volumes, effects, streams and other stuff. Call this several times per frame (the more the better) if you specified irrKlang to run single threaded. Otherwise it is not necessary to use this method. This method is being called by the scene manager automaticly if you are using one, so you might want to ignore this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a1084577f9f43cb12e86cea43c323b12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool irrklang::ISoundEngine::isCurrentlyPlaying</definition>
        <argsstring>(const char *soundName)=0</argsstring>
        <name>isCurrentlyPlaying</name>
        <param>
          <type>const char *</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
<para>Returns if a sound with the specified name is currently playing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a1e6cb7800d4c5b8e8029d2a0da4aca21" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool irrklang::ISoundEngine::isCurrentlyPlaying</definition>
        <argsstring>(ISoundSource *source)=0</argsstring>
        <name>isCurrentlyPlaying</name>
        <param>
          <type><ref refid="classirrklang_1_1ISoundSource" kindref="compound">ISoundSource</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Returns if a sound with the specified source is currently playing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a6cb64f878a5355454c7197276127a7c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::registerAudioStreamLoader</definition>
        <argsstring>(IAudioStreamLoader *loader)=0</argsstring>
        <name>registerAudioStreamLoader</name>
        <param>
          <type><ref refid="classirrklang_1_1IAudioStreamLoader" kindref="compound">IAudioStreamLoader</ref> *</type>
          <declname>loader</declname>
        </param>
        <briefdescription>
<para>Registers a new audio stream loader in the sound engine. </para>        </briefdescription>
        <detaileddescription>
<para>Use this to enhance the audio engine to support other or new file formats. To do this, implement your own <ref refid="classirrklang_1_1IAudioStreamLoader" kindref="compound">IAudioStreamLoader</ref> interface and register it with this method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="308" column="1"/>
        <referencedby refid="ikpMP3_8cpp_1ac6ed931d442f71e992a96cdc08e58142" compoundref="ikpMP3_8cpp" startline="20" endline="40">irrKlangPluginInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a0a187bdd144434c26031a225856a1acc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool irrklang::ISoundEngine::isMultiThreaded</definition>
        <argsstring>() const  =0</argsstring>
        <name>isMultiThreaded</name>
        <briefdescription>
<para>Returns if irrKlang is running in the same thread as the application or is using multithreading. </para>        </briefdescription>
        <detaileddescription>
<para>This basicly returns the flag set by the user when creating the sound engine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1ad7c48f9d7ccc6f60adb1b3f024f9b189" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::addFileFactory</definition>
        <argsstring>(IFileFactory *fileFactory)=0</argsstring>
        <name>addFileFactory</name>
        <param>
          <type><ref refid="classirrklang_1_1IFileFactory" kindref="compound">IFileFactory</ref> *</type>
          <declname>fileFactory</declname>
        </param>
        <briefdescription>
<para>Adds a file factory to the sound engine, making it possible to override file access of the sound engine. </para>        </briefdescription>
        <detaileddescription>
<para>Derive your own class from <ref refid="classirrklang_1_1IFileFactory" kindref="compound">IFileFactory</ref>, overwrite the createFileReader() method and return your own implemented <ref refid="classirrklang_1_1IFileReader" kindref="compound">IFileReader</ref> to overwrite file access of irrKlang. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setDefault3DSoundMinDistance</definition>
        <argsstring>(ik_f32 minDistance)=0</argsstring>
        <name>setDefault3DSoundMinDistance</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>minDistance</declname>
        </param>
        <briefdescription>
<para>Sets the default minimal distance for 3D sounds. </para>        </briefdescription>
        <detaileddescription>
<para>This value influences how loud a sound is heard based on its distance. See <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> for details about what the min distance is. It is also possible to influence this default value for every sound file using <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">ISoundSource::setDefaultMinDistance()</ref>. This method only influences the initial distance value of sounds. For changing the distance after the sound has been started to play, use <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> and <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Default minimal distance for 3d sounds. The default value is 1.0f. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a3ba24125e73a696b61511f31d1716521" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>virtual ik_f32 irrklang::ISoundEngine::getDefault3DSoundMinDistance</definition>
        <argsstring>()=0</argsstring>
        <name>getDefault3DSoundMinDistance</name>
        <briefdescription>
<para>Returns the default minimal distance for 3D sounds. </para>        </briefdescription>
        <detaileddescription>
<para>This value influences how loud a sound is heard based on its distance. You can change it using <ref refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" kindref="member">setDefault3DSoundMinDistance()</ref>. See <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> for details about what the min distance is. It is also possible to influence this default value for every sound file using <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">ISoundSource::setDefaultMinDistance()</ref>. <simplesect kind="return"><para>Default minimal distance for 3d sounds. The default value is 1.0f. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a89a3ff86f692cff9613fe96e4c3480cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setDefault3DSoundMaxDistance</definition>
        <argsstring>(ik_f32 maxDistance)=0</argsstring>
        <name>setDefault3DSoundMaxDistance</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>maxDistance</declname>
        </param>
        <briefdescription>
<para>Sets the default maximal distance for 3D sounds. </para>        </briefdescription>
        <detaileddescription>
<para>Changing this value is usually not necessary. Use <ref refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" kindref="member">setDefault3DSoundMinDistance()</ref> instead. Don&apos;t change this value if you don&apos;t know what you are doing: This value causes the sound to stop attenuating after it reaches the max distance. Most people think that this sets the volume of the sound to 0 after this distance, but this is not true. Only change the minimal distance (using for example <ref refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" kindref="member">setDefault3DSoundMinDistance()</ref>) to influence this. See <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref> for details about what the max distance is. It is also possible to influence this default value for every sound file using <ref refid="classirrklang_1_1ISoundSource_1a7d22ed6bb25eeb14fec844c02f7553ce" kindref="member">ISoundSource::setDefaultMaxDistance()</ref>. This method only influences the initial distance value of sounds. For changing the distance after the sound has been started to play, use <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> and <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Default maximal distance for 3d sounds. The default value is 1000000000.0f. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1aba82bb9b5a8899e5ff5a87c858bb36bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>virtual ik_f32 irrklang::ISoundEngine::getDefault3DSoundMaxDistance</definition>
        <argsstring>()=0</argsstring>
        <name>getDefault3DSoundMaxDistance</name>
        <briefdescription>
<para>Returns the default maximal distance for 3D sounds. </para>        </briefdescription>
        <detaileddescription>
<para>This value influences how loud a sound is heard based on its distance. You can change it using setDefault3DSoundmaxDistance(), but changing this value is usually not necessary. This value causes the sound to stop attenuating after it reaches the max distance. Most people think that this sets the volume of the sound to 0 after this distance, but this is not true. Only change the minimal distance (using for example <ref refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" kindref="member">setDefault3DSoundMinDistance()</ref>) to influence this. See <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref> for details about what the max distance is. It is also possible to influence this default value for every sound file using <ref refid="classirrklang_1_1ISoundSource_1a7d22ed6bb25eeb14fec844c02f7553ce" kindref="member">ISoundSource::setDefaultMaxDistance()</ref>. <simplesect kind="return"><para>Default maximal distance for 3d sounds. The default value is 1000000000.0f. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a789c363d79071e868c5ee768f2c3d469" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setRolloffFactor</definition>
        <argsstring>(ik_f32 rolloff)=0</argsstring>
        <name>setRolloffFactor</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>rolloff</declname>
        </param>
        <briefdescription>
<para>Sets a rolloff factor which influences the amount of attenuation that is applied to 3D sounds. </para>        </briefdescription>
        <detaileddescription>
<para>The rolloff factor can range from 0.0 to 10.0, where 0 is no rolloff. 1.0 is the default rolloff factor set, the value which we also experience in the real world. A value of 2 would mean twice the real-world rolloff. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a088de9bd74ae6bd58d865a38ae2411f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundEngine::setDopplerEffectParameters</definition>
        <argsstring>(ik_f32 dopplerFactor=1.0f, ik_f32 distanceFactor=1.0f)=0</argsstring>
        <name>setDopplerEffectParameters</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>dopplerFactor</declname>
          <defval>1.0f</defval>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>distanceFactor</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
<para>Sets parameters affecting the doppler effect. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dopplerFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>is a value between 0 and 10 which multiplies the doppler effect. Default value is 1.0, which is the real world doppler effect, and 10.0f would be ten times the real world doppler effect. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distanceFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of meters in a vector unit. The default value is 1.0. Doppler effects are calculated in meters per second, with this parameter, this can be changed, all velocities and positions are influenced by this. If the measurement should be in foot instead of meters, set this value to 0.3048f for example. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1abcb159bed86265a22fe3435ce2541ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool irrklang::ISoundEngine::loadPlugins</definition>
        <argsstring>(const ik_c8 *path)=0</argsstring>
        <name>loadPlugins</name>
        <param>
          <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Loads irrKlang plugins from a custom path. </para>        </briefdescription>
        <detaileddescription>
<para>Plugins usually are .dll, .so or .dylib files named for example ikpMP3.dll (= short for irrKlangPluginMP3) which make it possible to play back mp3 files. Plugins are being loaded from the current working directory at startup of the sound engine if the parameter ESEO_LOAD_PLUGINS is set (which it is by default), but using this method, it is possible to load plugins from a custom path in addition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the plugin directory, like &quot;C:\games\somegamegame\irrklangplugins&quot;. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>returns true if sucessful or fals if not, for example because the path could not be found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a31cb74d06d3312cafb243498d97cb0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="structirrklang_1_1SInternalAudioInterface" kindref="compound">SInternalAudioInterface</ref> &amp;</type>
        <definition>virtual const SInternalAudioInterface&amp; irrklang::ISoundEngine::getInternalAudioInterface</definition>
        <argsstring>()=0</argsstring>
        <name>getInternalAudioInterface</name>
        <briefdescription>
<para>Returns a pointer to internal sound engine pointers, like the DirectSound interface. </para>        </briefdescription>
        <detaileddescription>
<para>Use this with caution. This is only exposed to make it possible for other libraries such as Video playback packages to extend or use the sound driver irrklang uses. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundEngine_1a3cbaae130ddd88adfef6af3861e8d9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool irrklang::ISoundEngine::setMixedDataOutputReceiver</definition>
        <argsstring>(ISoundMixedOutputReceiver *receiver)=0</argsstring>
        <name>setMixedDataOutputReceiver</name>
        <param>
          <type><ref refid="classirrklang_1_1ISoundMixedOutputReceiver" kindref="compound">ISoundMixedOutputReceiver</ref> *</type>
          <declname>receiver</declname>
        </param>
        <briefdescription>
<para>Sets the OutputMixedDataReceiver, so you can receive the pure mixed output audio data while it is being played. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used to store the sound output as .wav file or for creating a Oscillograph or similar. This works only with software based audio drivers, that is ESOD_WIN_MM, ESOD_ALSA, and ESOD_CORE_AUDIO. Returns true if sucessful and fals if the current audio driver doesn&apos;t support this feature. Set this to null again once you don&apos;t need it anymore. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="404" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to the sound engine, for playing 3d and 2d sound and music. </para>    </briefdescription>
    <detaileddescription>
<para>This is the main interface of irrKlang. You usually would create this using the <ref refid="namespaceirrklang_1ad9829f898bc0665fdd2554a6f5c7ca1c" kindref="member">createIrrKlangDevice()</ref> function. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="423">
        <label>irrklang::ISoundEngine</label>
        <link refid="classirrklang_1_1ISoundEngine"/>
        <childnode refid="424" relation="public-inheritance">
        </childnode>
      </node>
      <node id="424">
        <label>irrklang::IRefCounted</label>
        <link refid="classirrklang_1_1IRefCounted"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="425">
        <label>irrklang::ISoundEngine</label>
        <link refid="classirrklang_1_1ISoundEngine"/>
        <childnode refid="426" relation="public-inheritance">
        </childnode>
      </node>
      <node id="427">
        <label>int</label>
      </node>
      <node id="426">
        <label>irrklang::IRefCounted</label>
        <link refid="classirrklang_1_1IRefCounted"/>
        <childnode refid="427" relation="usage">
          <edgelabel>ReferenceCounter</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="irrKlang-1.5.0/include/ik_ISoundEngine.h" line="27" column="1" bodyfile="irrKlang-1.5.0/include/ik_ISoundEngine.h" bodystart="26" bodyend="405"/>
    <listofallmembers>
      <member refid="classirrklang_1_1ISoundEngine_1ad7c48f9d7ccc6f60adb1b3f024f9b189" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>addFileFactory</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a1a3542b9d4e1c0a77d7cc9591c3c9321" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>addSoundSourceAlias</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a4eed0fa6712872e55003b26462e21005" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>addSoundSourceFromFile</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a686f6a4c8a7e90ec6859436f6ae39707" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>addSoundSourceFromMemory</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a69c6ec4704a9b0225fb835319318ee4b" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>addSoundSourceFromPCMData</name></member>
      <member refid="classirrklang_1_1IRefCounted_1a869fe3adc6e49e8da105e95837a565b1" prot="public" virt="non-virtual"><scope>irrklang::ISoundEngine</scope><name>drop</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1aba82bb9b5a8899e5ff5a87c858bb36bb" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getDefault3DSoundMaxDistance</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a3ba24125e73a696b61511f31d1716521" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getDefault3DSoundMinDistance</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1ad815d525d837732ae744ec620b55d242" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getDriverName</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a31cb74d06d3312cafb243498d97cb0ca" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getInternalAudioInterface</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a7f5a0aff56ce54d9bbc5fcf6603cf516" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getSoundSource</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a2dd835d9767de26959b520dc491eb3d5" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getSoundSource</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a788aa75e2872c9b09786303a45de6c58" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getSoundSourceCount</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a268d7486dfaf4309b29228c501627ba6" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>getSoundVolume</name></member>
      <member refid="classirrklang_1_1IRefCounted_1a737b09ee717069b964a3bd0451690388" prot="public" virt="non-virtual"><scope>irrklang::ISoundEngine</scope><name>grab</name></member>
      <member refid="classirrklang_1_1IRefCounted_1ad9d20b84a525d7bc07e44b556fbf7da6" prot="public" virt="non-virtual"><scope>irrklang::ISoundEngine</scope><name>IRefCounted</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a1084577f9f43cb12e86cea43c323b12c" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>isCurrentlyPlaying</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a1e6cb7800d4c5b8e8029d2a0da4aca21" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>isCurrentlyPlaying</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a0a187bdd144434c26031a225856a1acc" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>isMultiThreaded</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1abcb159bed86265a22fe3435ce2541ea6" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>loadPlugins</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a25f612fe6479d3b22dc5bab2a2eaa927" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>play2D</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1aef959c10e0a0fd2df68abb1cdacd5893" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>play2D</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1adb09ecc8f61120ce14d26545ed43d8ec" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>play3D</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a06a76e7869221c69a351657e962965ff" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>play3D</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a6cb64f878a5355454c7197276127a7c9" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>registerAudioStreamLoader</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a1d37141994f73595fc96d5893844925c" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>removeAllSoundSources</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a82e712f7816f933145690983dbd8be9e" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>removeSoundSource</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1ae932ded6ce36b06440433714fd5ef7f8" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>removeSoundSource</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a92f1a34edd5bfdde3eaae13212eb4147" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setAllSoundsPaused</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a89a3ff86f692cff9613fe96e4c3480cc" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setDefault3DSoundMaxDistance</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setDefault3DSoundMinDistance</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a088de9bd74ae6bd58d865a38ae2411f3" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setDopplerEffectParameters</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1af3e6223435969159ef3b22d0c83d2b84" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setListenerPosition</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a3cbaae130ddd88adfef6af3861e8d9b0" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setMixedDataOutputReceiver</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a789c363d79071e868c5ee768f2c3d469" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setRolloffFactor</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a90b70abaae576b45ee062ea2e4380ea1" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>setSoundVolume</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a38dbc2f1d49e3127fc4a81a9c1a2f82d" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>stopAllSounds</name></member>
      <member refid="classirrklang_1_1ISoundEngine_1a7b4f4913148d42ffe80b69979ad25906" prot="public" virt="pure-virtual"><scope>irrklang::ISoundEngine</scope><name>update</name></member>
      <member refid="classirrklang_1_1IRefCounted_1a7fe8953e57adac9bcd28a94d3b251886" prot="public" virt="virtual"><scope>irrklang::ISoundEngine</scope><name>~IRefCounted</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
