<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="classirrklang_1_1vec3d" kind="class" language="C++" prot="public">
    <compoundname>irrklang::vec3d</compoundname>
    <includes refid="ik__vec3d_8h" local="no">ik_vec3d.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T irrklang::vec3d&lt; T &gt;::X</definition>
        <argsstring></argsstring>
        <name>X</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="245" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="245" bodyend="-1"/>
        <referencedby refid="classirrklang_1_1vec3d_1a1c8ebb209e6272f571f288b2f23a8363" compoundref="ik__vec3d_8h" startline="103" endline="106">irrklang::vec3d&lt; T &gt;::crossProduct</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a284e1619481e16373ea18b19461344aa" compoundref="ik__vec3d_8h" startline="81" endline="84">irrklang::vec3d&lt; T &gt;::dotProduct</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a9f5c9411ad637d980a1cf320d0a1cf2e" compoundref="ik__vec3d_8h" startline="62" endline="67">irrklang::vec3d&lt; T &gt;::equals</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aff4faac673e7e09c8d094b48b0a0e20f" compoundref="ik__vec3d_8h" startline="234" endline="240">irrklang::vec3d&lt; T &gt;::getAs4Values</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a1169871f8c3954bf67ac275f039b9794" compoundref="ik__vec3d_8h" startline="88" endline="92">irrklang::vec3d&lt; T &gt;::getDistanceFrom</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a770f92315410f52481b1820da7310697" compoundref="ik__vec3d_8h" startline="96" endline="100">irrklang::vec3d&lt; T &gt;::getDistanceFromSQ</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a13294fd4e67bee8d8ffee2fcaa42e912" compoundref="ik__vec3d_8h" startline="209" endline="229">irrklang::vec3d&lt; T &gt;::getHorizontalAngle</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a94e2d14115fa139cf94f70a2badbe133" compoundref="ik__vec3d_8h" startline="197" endline="203">irrklang::vec3d&lt; T &gt;::getInterpolated</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" compoundref="ik__vec3d_8h" startline="73" endline="73">irrklang::vec3d&lt; T &gt;::getLength</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ab88ccf139d3fb1580ff066a6306beb8e" compoundref="ik__vec3d_8h" startline="78" endline="78">irrklang::vec3d&lt; T &gt;::getLengthSQ</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6007451ded719744d8e1b45c9ae56cd4" compoundref="ik__vec3d_8h" startline="139" endline="144">irrklang::vec3d&lt; T &gt;::invert</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" compoundref="ik__vec3d_8h" startline="118" endline="129">irrklang::vec3d&lt; T &gt;::normalize</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a8e17286f43752a923d96d473a9889290" compoundref="ik__vec3d_8h" startline="57" endline="57">irrklang::vec3d&lt; T &gt;::operator!=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a4e2b18f4a5a9e3e0a511c6552a436d2a" compoundref="ik__vec3d_8h" startline="43" endline="43">irrklang::vec3d&lt; T &gt;::operator*</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a7407b8b660cb8a2b0c1fa6a164080b27" compoundref="ik__vec3d_8h" startline="44" endline="44">irrklang::vec3d&lt; T &gt;::operator*=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a2e47a1f820bc33f9f8cb6398341453fb" compoundref="ik__vec3d_8h" startline="37" endline="37">irrklang::vec3d&lt; T &gt;::operator+</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6e80559ccd3e0b860d48b5c72ca65eae" compoundref="ik__vec3d_8h" startline="38" endline="38">irrklang::vec3d&lt; T &gt;::operator+=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ab0656599ad85698244c84fb8c4242e46" compoundref="ik__vec3d_8h" startline="33" endline="33">irrklang::vec3d&lt; T &gt;::operator-</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ae7e87fb7134d57b6eab21ecbe026bb7d" compoundref="ik__vec3d_8h" startline="41" endline="41">irrklang::vec3d&lt; T &gt;::operator-=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a188b49432aa871140c8d59d042340598" compoundref="ik__vec3d_8h" startline="48" endline="48">irrklang::vec3d&lt; T &gt;::operator/</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a8116904b4a31601f19914efe9acfd8b4" compoundref="ik__vec3d_8h" startline="49" endline="49">irrklang::vec3d&lt; T &gt;::operator/=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6655691b3b97a4ac0acb4cd19d310fa7" compoundref="ik__vec3d_8h" startline="53" endline="53">irrklang::vec3d&lt; T &gt;::operator&lt;=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3a2d930f0331232714905a94e3ec1feb" compoundref="ik__vec3d_8h" startline="35" endline="35">irrklang::vec3d&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a68dca213efe08848b9325607eda4a629" compoundref="ik__vec3d_8h" startline="56" endline="56">irrklang::vec3d&lt; T &gt;::operator==</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1afd2945518f2e45732d68488ec2f7df3b" compoundref="ik__vec3d_8h" startline="54" endline="54">irrklang::vec3d&lt; T &gt;::operator&gt;=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a73e958aac6482aea6d4947d2737b3681" compoundref="ik__vec3d_8h" startline="166" endline="176">irrklang::vec3d&lt; T &gt;::rotateXYBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3c0df42f68cbbec6506091756d518c18" compoundref="ik__vec3d_8h" startline="150" endline="160">irrklang::vec3d&lt; T &gt;::rotateXZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aa619d2ed5f8e992f5ec60d7b262a0108" compoundref="ik__vec3d_8h" startline="182" endline="192">irrklang::vec3d&lt; T &gt;::rotateYZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" compoundref="ik__vec3d_8h" startline="69" endline="69">irrklang::vec3d&lt; T &gt;::set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T irrklang::vec3d&lt; T &gt;::Y</definition>
        <argsstring></argsstring>
        <name>Y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="245" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="245" bodyend="-1"/>
        <referencedby refid="classirrklang_1_1vec3d_1a1c8ebb209e6272f571f288b2f23a8363" compoundref="ik__vec3d_8h" startline="103" endline="106">irrklang::vec3d&lt; T &gt;::crossProduct</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a284e1619481e16373ea18b19461344aa" compoundref="ik__vec3d_8h" startline="81" endline="84">irrklang::vec3d&lt; T &gt;::dotProduct</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a9f5c9411ad637d980a1cf320d0a1cf2e" compoundref="ik__vec3d_8h" startline="62" endline="67">irrklang::vec3d&lt; T &gt;::equals</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aff4faac673e7e09c8d094b48b0a0e20f" compoundref="ik__vec3d_8h" startline="234" endline="240">irrklang::vec3d&lt; T &gt;::getAs4Values</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a1169871f8c3954bf67ac275f039b9794" compoundref="ik__vec3d_8h" startline="88" endline="92">irrklang::vec3d&lt; T &gt;::getDistanceFrom</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a770f92315410f52481b1820da7310697" compoundref="ik__vec3d_8h" startline="96" endline="100">irrklang::vec3d&lt; T &gt;::getDistanceFromSQ</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a13294fd4e67bee8d8ffee2fcaa42e912" compoundref="ik__vec3d_8h" startline="209" endline="229">irrklang::vec3d&lt; T &gt;::getHorizontalAngle</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a94e2d14115fa139cf94f70a2badbe133" compoundref="ik__vec3d_8h" startline="197" endline="203">irrklang::vec3d&lt; T &gt;::getInterpolated</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" compoundref="ik__vec3d_8h" startline="73" endline="73">irrklang::vec3d&lt; T &gt;::getLength</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ab88ccf139d3fb1580ff066a6306beb8e" compoundref="ik__vec3d_8h" startline="78" endline="78">irrklang::vec3d&lt; T &gt;::getLengthSQ</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6007451ded719744d8e1b45c9ae56cd4" compoundref="ik__vec3d_8h" startline="139" endline="144">irrklang::vec3d&lt; T &gt;::invert</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" compoundref="ik__vec3d_8h" startline="118" endline="129">irrklang::vec3d&lt; T &gt;::normalize</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a8e17286f43752a923d96d473a9889290" compoundref="ik__vec3d_8h" startline="57" endline="57">irrklang::vec3d&lt; T &gt;::operator!=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a4e2b18f4a5a9e3e0a511c6552a436d2a" compoundref="ik__vec3d_8h" startline="43" endline="43">irrklang::vec3d&lt; T &gt;::operator*</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a7407b8b660cb8a2b0c1fa6a164080b27" compoundref="ik__vec3d_8h" startline="44" endline="44">irrklang::vec3d&lt; T &gt;::operator*=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a2e47a1f820bc33f9f8cb6398341453fb" compoundref="ik__vec3d_8h" startline="37" endline="37">irrklang::vec3d&lt; T &gt;::operator+</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6e80559ccd3e0b860d48b5c72ca65eae" compoundref="ik__vec3d_8h" startline="38" endline="38">irrklang::vec3d&lt; T &gt;::operator+=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ab0656599ad85698244c84fb8c4242e46" compoundref="ik__vec3d_8h" startline="33" endline="33">irrklang::vec3d&lt; T &gt;::operator-</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ae7e87fb7134d57b6eab21ecbe026bb7d" compoundref="ik__vec3d_8h" startline="41" endline="41">irrklang::vec3d&lt; T &gt;::operator-=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a188b49432aa871140c8d59d042340598" compoundref="ik__vec3d_8h" startline="48" endline="48">irrklang::vec3d&lt; T &gt;::operator/</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a8116904b4a31601f19914efe9acfd8b4" compoundref="ik__vec3d_8h" startline="49" endline="49">irrklang::vec3d&lt; T &gt;::operator/=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6655691b3b97a4ac0acb4cd19d310fa7" compoundref="ik__vec3d_8h" startline="53" endline="53">irrklang::vec3d&lt; T &gt;::operator&lt;=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3a2d930f0331232714905a94e3ec1feb" compoundref="ik__vec3d_8h" startline="35" endline="35">irrklang::vec3d&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a68dca213efe08848b9325607eda4a629" compoundref="ik__vec3d_8h" startline="56" endline="56">irrklang::vec3d&lt; T &gt;::operator==</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1afd2945518f2e45732d68488ec2f7df3b" compoundref="ik__vec3d_8h" startline="54" endline="54">irrklang::vec3d&lt; T &gt;::operator&gt;=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a73e958aac6482aea6d4947d2737b3681" compoundref="ik__vec3d_8h" startline="166" endline="176">irrklang::vec3d&lt; T &gt;::rotateXYBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3c0df42f68cbbec6506091756d518c18" compoundref="ik__vec3d_8h" startline="150" endline="160">irrklang::vec3d&lt; T &gt;::rotateXZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aa619d2ed5f8e992f5ec60d7b262a0108" compoundref="ik__vec3d_8h" startline="182" endline="192">irrklang::vec3d&lt; T &gt;::rotateYZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" compoundref="ik__vec3d_8h" startline="69" endline="69">irrklang::vec3d&lt; T &gt;::set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T irrklang::vec3d&lt; T &gt;::Z</definition>
        <argsstring></argsstring>
        <name>Z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="245" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="245" bodyend="-1"/>
        <referencedby refid="classirrklang_1_1vec3d_1a1c8ebb209e6272f571f288b2f23a8363" compoundref="ik__vec3d_8h" startline="103" endline="106">irrklang::vec3d&lt; T &gt;::crossProduct</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a284e1619481e16373ea18b19461344aa" compoundref="ik__vec3d_8h" startline="81" endline="84">irrklang::vec3d&lt; T &gt;::dotProduct</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a9f5c9411ad637d980a1cf320d0a1cf2e" compoundref="ik__vec3d_8h" startline="62" endline="67">irrklang::vec3d&lt; T &gt;::equals</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aff4faac673e7e09c8d094b48b0a0e20f" compoundref="ik__vec3d_8h" startline="234" endline="240">irrklang::vec3d&lt; T &gt;::getAs4Values</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a1169871f8c3954bf67ac275f039b9794" compoundref="ik__vec3d_8h" startline="88" endline="92">irrklang::vec3d&lt; T &gt;::getDistanceFrom</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a770f92315410f52481b1820da7310697" compoundref="ik__vec3d_8h" startline="96" endline="100">irrklang::vec3d&lt; T &gt;::getDistanceFromSQ</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a13294fd4e67bee8d8ffee2fcaa42e912" compoundref="ik__vec3d_8h" startline="209" endline="229">irrklang::vec3d&lt; T &gt;::getHorizontalAngle</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a94e2d14115fa139cf94f70a2badbe133" compoundref="ik__vec3d_8h" startline="197" endline="203">irrklang::vec3d&lt; T &gt;::getInterpolated</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" compoundref="ik__vec3d_8h" startline="73" endline="73">irrklang::vec3d&lt; T &gt;::getLength</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ab88ccf139d3fb1580ff066a6306beb8e" compoundref="ik__vec3d_8h" startline="78" endline="78">irrklang::vec3d&lt; T &gt;::getLengthSQ</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6007451ded719744d8e1b45c9ae56cd4" compoundref="ik__vec3d_8h" startline="139" endline="144">irrklang::vec3d&lt; T &gt;::invert</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" compoundref="ik__vec3d_8h" startline="118" endline="129">irrklang::vec3d&lt; T &gt;::normalize</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a8e17286f43752a923d96d473a9889290" compoundref="ik__vec3d_8h" startline="57" endline="57">irrklang::vec3d&lt; T &gt;::operator!=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a4e2b18f4a5a9e3e0a511c6552a436d2a" compoundref="ik__vec3d_8h" startline="43" endline="43">irrklang::vec3d&lt; T &gt;::operator*</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a7407b8b660cb8a2b0c1fa6a164080b27" compoundref="ik__vec3d_8h" startline="44" endline="44">irrklang::vec3d&lt; T &gt;::operator*=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a2e47a1f820bc33f9f8cb6398341453fb" compoundref="ik__vec3d_8h" startline="37" endline="37">irrklang::vec3d&lt; T &gt;::operator+</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6e80559ccd3e0b860d48b5c72ca65eae" compoundref="ik__vec3d_8h" startline="38" endline="38">irrklang::vec3d&lt; T &gt;::operator+=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ab0656599ad85698244c84fb8c4242e46" compoundref="ik__vec3d_8h" startline="33" endline="33">irrklang::vec3d&lt; T &gt;::operator-</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1ae7e87fb7134d57b6eab21ecbe026bb7d" compoundref="ik__vec3d_8h" startline="41" endline="41">irrklang::vec3d&lt; T &gt;::operator-=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a188b49432aa871140c8d59d042340598" compoundref="ik__vec3d_8h" startline="48" endline="48">irrklang::vec3d&lt; T &gt;::operator/</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a8116904b4a31601f19914efe9acfd8b4" compoundref="ik__vec3d_8h" startline="49" endline="49">irrklang::vec3d&lt; T &gt;::operator/=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a6655691b3b97a4ac0acb4cd19d310fa7" compoundref="ik__vec3d_8h" startline="53" endline="53">irrklang::vec3d&lt; T &gt;::operator&lt;=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3a2d930f0331232714905a94e3ec1feb" compoundref="ik__vec3d_8h" startline="35" endline="35">irrklang::vec3d&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a68dca213efe08848b9325607eda4a629" compoundref="ik__vec3d_8h" startline="56" endline="56">irrklang::vec3d&lt; T &gt;::operator==</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1afd2945518f2e45732d68488ec2f7df3b" compoundref="ik__vec3d_8h" startline="54" endline="54">irrklang::vec3d&lt; T &gt;::operator&gt;=</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a73e958aac6482aea6d4947d2737b3681" compoundref="ik__vec3d_8h" startline="166" endline="176">irrklang::vec3d&lt; T &gt;::rotateXYBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3c0df42f68cbbec6506091756d518c18" compoundref="ik__vec3d_8h" startline="150" endline="160">irrklang::vec3d&lt; T &gt;::rotateXZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aa619d2ed5f8e992f5ec60d7b262a0108" compoundref="ik__vec3d_8h" startline="182" endline="192">irrklang::vec3d&lt; T &gt;::rotateYZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" compoundref="ik__vec3d_8h" startline="69" endline="69">irrklang::vec3d&lt; T &gt;::set</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a396e8a6e414d6311921252e31e2d91d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>irrklang::vec3d&lt; T &gt;::vec3d</definition>
        <argsstring>()</argsstring>
        <name>vec3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="21" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1acf6454acf91480f6f3ff1f285b72665e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>irrklang::vec3d&lt; T &gt;::vec3d</definition>
        <argsstring>(T nx, T ny, T nz)</argsstring>
        <name>vec3d</name>
        <param>
          <type>T</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="22" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a3cedbef9c16c38bc5bde34f39cd789eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>irrklang::vec3d&lt; T &gt;::vec3d</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>vec3d</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="23" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1ab0656599ad85698244c84fb8c4242e46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator-</definition>
        <argsstring>() const </argsstring>
        <name>operator-</name>
        <briefdescription>
<para>constructor creating an irrklang <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref> from an irrlicht vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="33" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="33" bodyend="33"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a3a2d930f0331232714905a94e3ec1feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="35" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="35" bodyend="35"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a2e47a1f820bc33f9f8cb6398341453fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator+</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="37" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="37" bodyend="37"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a6e80559ccd3e0b860d48b5c72ca65eae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator+=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="38" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="38" bodyend="38"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a30780a09359dddbf016e08084d5fcb42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator-</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="40" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="40" bodyend="40"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1ae7e87fb7134d57b6eab21ecbe026bb7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator-=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="41" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="41" bodyend="41"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a4e2b18f4a5a9e3e0a511c6552a436d2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator*</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="43" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="43" bodyend="43"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a7407b8b660cb8a2b0c1fa6a164080b27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator*=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="44" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="44" bodyend="44"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1ac468f5f0764d9f73947ad58378843c0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator*</definition>
        <argsstring>(const T v) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="45" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="45" bodyend="45"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a1f52f8472c07a98a9b5c951672f12691" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator*=</definition>
        <argsstring>(const T v)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="46" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="46" bodyend="46"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a188b49432aa871140c8d59d042340598" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator/</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="48" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="48" bodyend="48"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a8116904b4a31601f19914efe9acfd8b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator/=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="49" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="49" bodyend="49"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a8822a814763488fb5ae2ea2ec6fdba28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::operator/</definition>
        <argsstring>(const T v) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="50" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="50" bodyend="50"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a5088439758f22a531149b9ea46d982e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::operator/=</definition>
        <argsstring>(const T v)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="51" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="51" bodyend="51"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a6655691b3b97a4ac0acb4cd19d310fa7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool irrklang::vec3d&lt; T &gt;::operator&lt;=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="53" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="53" bodyend="53"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1afd2945518f2e45732d68488ec2f7df3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool irrklang::vec3d&lt; T &gt;::operator&gt;=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="54" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="54" bodyend="54"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a68dca213efe08848b9325607eda4a629" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool irrklang::vec3d&lt; T &gt;::operator==</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="56" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="56" bodyend="56"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a8e17286f43752a923d96d473a9889290" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool irrklang::vec3d&lt; T &gt;::operator!=</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="57" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="57" bodyend="57"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a9f5c9411ad637d980a1cf320d0a1cf2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool irrklang::vec3d&lt; T &gt;::equals</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other)</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>returns if this vector equalsfloat the other one, taking floating point rounding errors into account </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="62" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="62" bodyend="67"/>
        <references refid="namespaceirrklang_1a6ce1a12052cdee7b6d81a053a73a4f86" compoundref="ik__irrKlangTypes_8h" startline="68" endline="71">irrklang::equalsfloat</references>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::set</definition>
        <argsstring>(const T nx, const T ny, const T nz)</argsstring>
        <name>set</name>
        <param>
          <type>const T</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="69" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="69" bodyend="69"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
        <referencedby refid="classirrklang_1_1vec3d_1a73e958aac6482aea6d4947d2737b3681" compoundref="ik__vec3d_8h" startline="166" endline="176">irrklang::vec3d&lt; T &gt;::rotateXYBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1a3c0df42f68cbbec6506091756d518c18" compoundref="ik__vec3d_8h" startline="150" endline="160">irrklang::vec3d&lt; T &gt;::rotateXZBy</referencedby>
        <referencedby refid="classirrklang_1_1vec3d_1aa619d2ed5f8e992f5ec60d7b262a0108" compoundref="ik__vec3d_8h" startline="182" endline="192">irrklang::vec3d&lt; T &gt;::rotateYZBy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1afc80ce5e50e9889e6199696802a31976" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::set</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;p)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="70" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="70" bodyend="70"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceirrklang_1a1c98510aa3989b1780723e2fb15f7c3d" kindref="member">ik_f64</ref></type>
        <definition>ik_f64 irrklang::vec3d&lt; T &gt;::getLength</definition>
        <argsstring>() const </argsstring>
        <name>getLength</name>
        <briefdescription>
<para>Returns length of the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="73" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="73" bodyend="73"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
        <referencedby refid="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" compoundref="ik__vec3d_8h" startline="118" endline="129">irrklang::vec3d&lt; T &gt;::normalize</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1ab88ccf139d3fb1580ff066a6306beb8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceirrklang_1a1c98510aa3989b1780723e2fb15f7c3d" kindref="member">ik_f64</ref></type>
        <definition>ik_f64 irrklang::vec3d&lt; T &gt;::getLengthSQ</definition>
        <argsstring>() const </argsstring>
        <name>getLengthSQ</name>
        <briefdescription>
<para>Returns squared length of the vector. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful because it is much faster then <ref refid="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" kindref="member">getLength()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="78" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="78" bodyend="78"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a284e1619481e16373ea18b19461344aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T irrklang::vec3d&lt; T &gt;::dotProduct</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>dotProduct</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the dot product with another vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="81" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="81" bodyend="84"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a1169871f8c3954bf67ac275f039b9794" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceirrklang_1a1c98510aa3989b1780723e2fb15f7c3d" kindref="member">ik_f64</ref></type>
        <definition>ik_f64 irrklang::vec3d&lt; T &gt;::getDistanceFrom</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>getDistanceFrom</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns distance from an other point. </para>        </briefdescription>
        <detaileddescription>
<para>Here, the vector is interpreted as point in 3 dimensional space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="88" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="88" bodyend="92"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a770f92315410f52481b1820da7310697" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>ik_f32 irrklang::vec3d&lt; T &gt;::getDistanceFromSQ</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other) const </argsstring>
        <name>getDistanceFromSQ</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns squared distance from an other point. </para>        </briefdescription>
        <detaileddescription>
<para>Here, the vector is interpreted as point in 3 dimensional space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="96" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="96" bodyend="100"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
        <referencedby refid="classirrklang_1_1vec3d_1a04744e39c6afadbe300062f73e592934" compoundref="ik__vec3d_8h" startline="110" endline="115">irrklang::vec3d&lt; T &gt;::isBetweenPoints</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a1c8ebb209e6272f571f288b2f23a8363" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::crossProduct</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;p) const </argsstring>
        <name>crossProduct</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Calculates the cross product with another vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="103" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="103" bodyend="106"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a04744e39c6afadbe300062f73e592934" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool irrklang::vec3d&lt; T &gt;::isBetweenPoints</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;begin, const vec3d&lt; T &gt; &amp;end) const </argsstring>
        <name>isBetweenPoints</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Returns if this vector interpreted as a point is on a line between two other points. </para>        </briefdescription>
        <detaileddescription>
<para>It is assumed that the point is on the line. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="110" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="110" bodyend="115"/>
        <references refid="classirrklang_1_1vec3d_1a770f92315410f52481b1820da7310697" compoundref="ik__vec3d_8h" startline="96" endline="100">irrklang::vec3d&lt; T &gt;::getDistanceFromSQ</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
        <definition>vec3d&lt;T&gt;&amp; irrklang::vec3d&lt; T &gt;::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
<para>Normalizes the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="118" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="118" bodyend="129"/>
        <references refid="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" compoundref="ik__vec3d_8h" startline="73" endline="73">irrklang::vec3d&lt; T &gt;::getLength</references>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
        <referencedby refid="classirrklang_1_1vec3d_1ae117ab59edab77fe6ecfe6dab3c546a9" compoundref="ik__vec3d_8h" startline="132" endline="136">irrklang::vec3d&lt; T &gt;::setLength</referencedby>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1ae117ab59edab77fe6ecfe6dab3c546a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::setLength</definition>
        <argsstring>(T newlength)</argsstring>
        <name>setLength</name>
        <param>
          <type>T</type>
          <declname>newlength</declname>
        </param>
        <briefdescription>
<para>Sets the lenght of the vector to a new value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="132" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="132" bodyend="136"/>
        <references refid="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" compoundref="ik__vec3d_8h" startline="118" endline="129">irrklang::vec3d&lt; T &gt;::normalize</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a6007451ded719744d8e1b45c9ae56cd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <briefdescription>
<para>Inverts the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="139" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="139" bodyend="144"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a3c0df42f68cbbec6506091756d518c18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::rotateXZBy</definition>
        <argsstring>(ik_f64 degrees, const vec3d&lt; T &gt; &amp;center)</argsstring>
        <name>rotateXZBy</name>
        <param>
          <type><ref refid="namespaceirrklang_1a1c98510aa3989b1780723e2fb15f7c3d" kindref="member">ik_f64</ref></type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>Rotates the vector by a specified number of degrees around the Y axis and the specified center. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of degrees to rotate around the Y axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center of the rotation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="150" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="150" bodyend="160"/>
        <references refid="namespaceirrklang_1a738ade686859c0d98ce9edbd34c4fc1b" compoundref="ik__irrKlangTypes_8h" startline="64">irrklang::IK_DEGTORAD64</references>
        <references refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" compoundref="ik__vec3d_8h" startline="69" endline="69">irrklang::vec3d&lt; T &gt;::set</references>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a73e958aac6482aea6d4947d2737b3681" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::rotateXYBy</definition>
        <argsstring>(ik_f64 degrees, const vec3d&lt; T &gt; &amp;center)</argsstring>
        <name>rotateXYBy</name>
        <param>
          <type><ref refid="namespaceirrklang_1a1c98510aa3989b1780723e2fb15f7c3d" kindref="member">ik_f64</ref></type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>Rotates the vector by a specified number of degrees around the Z axis and the specified center. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of degrees to rotate around the Z axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center of the rotation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="166" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="166" bodyend="176"/>
        <references refid="namespaceirrklang_1a738ade686859c0d98ce9edbd34c4fc1b" compoundref="ik__irrKlangTypes_8h" startline="64">irrklang::IK_DEGTORAD64</references>
        <references refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" compoundref="ik__vec3d_8h" startline="69" endline="69">irrklang::vec3d&lt; T &gt;::set</references>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1aa619d2ed5f8e992f5ec60d7b262a0108" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::rotateYZBy</definition>
        <argsstring>(ik_f64 degrees, const vec3d&lt; T &gt; &amp;center)</argsstring>
        <name>rotateYZBy</name>
        <param>
          <type><ref refid="namespaceirrklang_1a1c98510aa3989b1780723e2fb15f7c3d" kindref="member">ik_f64</ref></type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>Rotates the vector by a specified number of degrees around the X axis and the specified center. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of degrees to rotate around the X axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center of the rotation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="182" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="182" bodyend="192"/>
        <references refid="namespaceirrklang_1a738ade686859c0d98ce9edbd34c4fc1b" compoundref="ik__irrKlangTypes_8h" startline="64">irrklang::IK_DEGTORAD64</references>
        <references refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" compoundref="ik__vec3d_8h" startline="69" endline="69">irrklang::vec3d&lt; T &gt;::set</references>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a94e2d14115fa139cf94f70a2badbe133" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::getInterpolated</definition>
        <argsstring>(const vec3d&lt; T &gt; &amp;other, ik_f32 d) const </argsstring>
        <name>getInterpolated</name>
        <param>
          <type>const <ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns interpolated vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>other vector to interpolate between </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>value between 0.0f and 1.0f. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="197" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="197" bodyend="203"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1a13294fd4e67bee8d8ffee2fcaa42e912" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classirrklang_1_1vec3d" kindref="compound">vec3d</ref>&lt; T &gt;</type>
        <definition>vec3d&lt;T&gt; irrklang::vec3d&lt; T &gt;::getHorizontalAngle</definition>
        <argsstring>()</argsstring>
        <name>getHorizontalAngle</name>
        <briefdescription>
<para>Gets the Y and Z rotations of a vector. </para>        </briefdescription>
        <detaileddescription>
<para>Thanks to Arras on the Irrlicht forums to add this method. <simplesect kind="return"><para>A vector representing the rotation in degrees of this vector. The Z component of the vector will always be 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="209" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="209" bodyend="229"/>
        <references refid="namespaceirrklang_1a899ce8a298f44c2a5413c6dc0e87f640" compoundref="ik__irrKlangTypes_8h" startline="61">irrklang::IK_RADTODEG</references>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1vec3d_1aff4faac673e7e09c8d094b48b0a0e20f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void irrklang::vec3d&lt; T &gt;::getAs4Values</definition>
        <argsstring>(T *array)</argsstring>
        <name>getAs4Values</name>
        <param>
          <type>T *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fills an array of 4 values with the vector data (usually floats). </para>        </briefdescription>
        <detaileddescription>
<para>Useful for setting in shader constants for example. The fourth value will always be 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="234" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="234" bodyend="240"/>
        <references refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::X</references>
        <references refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Y</references>
        <references refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" compoundref="ik__vec3d_8h" startline="245">irrklang::vec3d&lt; T &gt;::Z</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a 3d vector template class for representing vectors and points in 3d </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="630">
        <label>T</label>
      </node>
      <node id="629">
        <label>irrklang::vec3d&lt; T &gt;</label>
        <link refid="classirrklang_1_1vec3d"/>
        <childnode refid="630" relation="usage">
          <edgelabel>X</edgelabel>
          <edgelabel>Y</edgelabel>
          <edgelabel>Z</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="irrKlang-1.5.0/include/ik_vec3d.h" line="18" column="1" bodyfile="irrKlang-1.5.0/include/ik_vec3d.h" bodystart="17" bodyend="246"/>
    <listofallmembers>
      <member refid="classirrklang_1_1vec3d_1a1c8ebb209e6272f571f288b2f23a8363" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>crossProduct</name></member>
      <member refid="classirrklang_1_1vec3d_1a284e1619481e16373ea18b19461344aa" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>dotProduct</name></member>
      <member refid="classirrklang_1_1vec3d_1a9f5c9411ad637d980a1cf320d0a1cf2e" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>equals</name></member>
      <member refid="classirrklang_1_1vec3d_1aff4faac673e7e09c8d094b48b0a0e20f" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getAs4Values</name></member>
      <member refid="classirrklang_1_1vec3d_1a1169871f8c3954bf67ac275f039b9794" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getDistanceFrom</name></member>
      <member refid="classirrklang_1_1vec3d_1a770f92315410f52481b1820da7310697" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getDistanceFromSQ</name></member>
      <member refid="classirrklang_1_1vec3d_1a13294fd4e67bee8d8ffee2fcaa42e912" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getHorizontalAngle</name></member>
      <member refid="classirrklang_1_1vec3d_1a94e2d14115fa139cf94f70a2badbe133" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getInterpolated</name></member>
      <member refid="classirrklang_1_1vec3d_1a0e37bc53c61352fb1b6390c97ea0c6aa" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getLength</name></member>
      <member refid="classirrklang_1_1vec3d_1ab88ccf139d3fb1580ff066a6306beb8e" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>getLengthSQ</name></member>
      <member refid="classirrklang_1_1vec3d_1a6007451ded719744d8e1b45c9ae56cd4" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>invert</name></member>
      <member refid="classirrklang_1_1vec3d_1a04744e39c6afadbe300062f73e592934" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>isBetweenPoints</name></member>
      <member refid="classirrklang_1_1vec3d_1a1adb3f2521103ab9dfbbdce8459a69ac" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>normalize</name></member>
      <member refid="classirrklang_1_1vec3d_1a8e17286f43752a923d96d473a9889290" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator!=</name></member>
      <member refid="classirrklang_1_1vec3d_1a4e2b18f4a5a9e3e0a511c6552a436d2a" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator*</name></member>
      <member refid="classirrklang_1_1vec3d_1ac468f5f0764d9f73947ad58378843c0d" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator*</name></member>
      <member refid="classirrklang_1_1vec3d_1a7407b8b660cb8a2b0c1fa6a164080b27" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator*=</name></member>
      <member refid="classirrklang_1_1vec3d_1a1f52f8472c07a98a9b5c951672f12691" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator*=</name></member>
      <member refid="classirrklang_1_1vec3d_1a2e47a1f820bc33f9f8cb6398341453fb" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator+</name></member>
      <member refid="classirrklang_1_1vec3d_1a6e80559ccd3e0b860d48b5c72ca65eae" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator+=</name></member>
      <member refid="classirrklang_1_1vec3d_1ab0656599ad85698244c84fb8c4242e46" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator-</name></member>
      <member refid="classirrklang_1_1vec3d_1a30780a09359dddbf016e08084d5fcb42" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator-</name></member>
      <member refid="classirrklang_1_1vec3d_1ae7e87fb7134d57b6eab21ecbe026bb7d" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator-=</name></member>
      <member refid="classirrklang_1_1vec3d_1a188b49432aa871140c8d59d042340598" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator/</name></member>
      <member refid="classirrklang_1_1vec3d_1a8822a814763488fb5ae2ea2ec6fdba28" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator/</name></member>
      <member refid="classirrklang_1_1vec3d_1a8116904b4a31601f19914efe9acfd8b4" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator/=</name></member>
      <member refid="classirrklang_1_1vec3d_1a5088439758f22a531149b9ea46d982e2" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator/=</name></member>
      <member refid="classirrklang_1_1vec3d_1a6655691b3b97a4ac0acb4cd19d310fa7" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator&lt;=</name></member>
      <member refid="classirrklang_1_1vec3d_1a3a2d930f0331232714905a94e3ec1feb" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator=</name></member>
      <member refid="classirrklang_1_1vec3d_1a68dca213efe08848b9325607eda4a629" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator==</name></member>
      <member refid="classirrklang_1_1vec3d_1afd2945518f2e45732d68488ec2f7df3b" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>operator&gt;=</name></member>
      <member refid="classirrklang_1_1vec3d_1a73e958aac6482aea6d4947d2737b3681" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>rotateXYBy</name></member>
      <member refid="classirrklang_1_1vec3d_1a3c0df42f68cbbec6506091756d518c18" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>rotateXZBy</name></member>
      <member refid="classirrklang_1_1vec3d_1aa619d2ed5f8e992f5ec60d7b262a0108" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>rotateYZBy</name></member>
      <member refid="classirrklang_1_1vec3d_1a843126596fd738246d0816030a53ac0f" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>set</name></member>
      <member refid="classirrklang_1_1vec3d_1afc80ce5e50e9889e6199696802a31976" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>set</name></member>
      <member refid="classirrklang_1_1vec3d_1ae117ab59edab77fe6ecfe6dab3c546a9" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>setLength</name></member>
      <member refid="classirrklang_1_1vec3d_1a396e8a6e414d6311921252e31e2d91d9" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>vec3d</name></member>
      <member refid="classirrklang_1_1vec3d_1acf6454acf91480f6f3ff1f285b72665e" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>vec3d</name></member>
      <member refid="classirrklang_1_1vec3d_1a3cedbef9c16c38bc5bde34f39cd789eb" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>vec3d</name></member>
      <member refid="classirrklang_1_1vec3d_1ac3c930788d6718a78cf93b6022124648" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>X</name></member>
      <member refid="classirrklang_1_1vec3d_1afa70e7ee18d11b83fe02829cebbc10ae" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>Y</name></member>
      <member refid="classirrklang_1_1vec3d_1a8d41296edcd4c6739847351b9e107fc3" prot="public" virt="non-virtual"><scope>irrklang::vec3d</scope><name>Z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
