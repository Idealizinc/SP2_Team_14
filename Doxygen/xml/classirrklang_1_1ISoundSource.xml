<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="classirrklang_1_1ISoundSource" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>irrklang::ISoundSource</compoundname>
    <basecompoundref refid="classirrklang_1_1IVirtualRefCounted" prot="public" virt="non-virtual">irrklang::IVirtualRefCounted</basecompoundref>
    <includes refid="ik__ISoundSource_8h" local="no">ik_ISoundSource.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1afbd2d8ef903b106a8e9a332c0dd06693" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="namespaceirrklang_1af179ad966eb79d01f6d1cf8927087449" kindref="member">ik_c8</ref> *</type>
        <definition>virtual const ik_c8* irrklang::ISoundSource::getName</definition>
        <argsstring>()=0</argsstring>
        <name>getName</name>
        <briefdescription>
<para>Returns the name of the sound source (usually, this is the file name) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1aed0e4abae00be20497ccb905d2db7588" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundSource::setStreamMode</definition>
        <argsstring>(E_STREAM_MODE mode)=0</argsstring>
        <name>setStreamMode</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06e" kindref="member">E_STREAM_MODE</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets the stream mode which should be used for a sound played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>Note that if this is set to ESM_NO_STREAMING, the engine still might decide to stream the sound if it is too big. The threashold for this can be adjusted using <ref refid="classirrklang_1_1ISoundSource_1a434174ae21f4e43a480395e79fb2d4a9" kindref="member">ISoundSource::setForcedStreamingThreshold()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a5b1158611ec58ab372ef05de541fed56" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6eab873ba387c6a4e05839e6a434d06e" kindref="member">E_STREAM_MODE</ref></type>
        <definition>virtual E_STREAM_MODE irrklang::ISoundSource::getStreamMode</definition>
        <argsstring>()=0</argsstring>
        <name>getStreamMode</name>
        <briefdescription>
<para>Returns the detected or set type of the sound with wich the sound will be played. </para>        </briefdescription>
        <detaileddescription>
<para>Note: If the returned type is ESM_AUTO_DETECT, this mode will change after the sound has been played the first time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a23ff097b74d284529e4e1c75d0611884" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1adf9f75b6ca98aff6843fb294125571e0" kindref="member">ik_u32</ref></type>
        <definition>virtual ik_u32 irrklang::ISoundSource::getPlayLength</definition>
        <argsstring>()=0</argsstring>
        <name>getPlayLength</name>
        <briefdescription>
<para>Returns the play length of the sound in milliseconds. </para>        </briefdescription>
        <detaileddescription>
<para>Returns -1 if not known for this sound for example because its decoder does not support lenght reporting or it is a file stream of unknown size. Note: If the sound never has been played before, the sound engine will have to open the file and try to get the play lenght from there, so this call could take a bit depending on the type of file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a4c24dd695accd2d2f0f6e00124af1cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structirrklang_1_1SAudioStreamFormat" kindref="compound">SAudioStreamFormat</ref></type>
        <definition>virtual SAudioStreamFormat irrklang::ISoundSource::getAudioFormat</definition>
        <argsstring>()=0</argsstring>
        <name>getAudioFormat</name>
        <briefdescription>
<para>Returns informations about the sound source: channel count (mono/stereo), frame count, sample rate, etc. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the structure filled with 0 or negative values if not known for this sound for example because because the file could not be opened or similar. Note: If the sound never has been played before, the sound engine will have to open the file and try to get the play lenght from there, so this call could take a bit depending on the type of file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a6a608ded51f5920d0cb5d28ac6ee5455" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool irrklang::ISoundSource::getIsSeekingSupported</definition>
        <argsstring>()=0</argsstring>
        <name>getIsSeekingSupported</name>
        <briefdescription>
<para>Returns if sounds played from this source will support seeking via <ref refid="classirrklang_1_1ISound_1a60a6170484331189daadb541f62c5dc5" kindref="member">ISound::setPlayPosition()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a52accb16b3a554558f12f99d16f57a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundSource::setDefaultVolume</definition>
        <argsstring>(ik_f32 volume=1.0f)=0</argsstring>
        <name>setDefaultVolume</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>volume</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
<para>Sets the default volume for a sound played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>The default value of this is 1.0f. Note that the default volume is being multiplied with the master volume of <ref refid="classirrklang_1_1ISoundEngine" kindref="compound">ISoundEngine</ref>, change this via <ref refid="classirrklang_1_1ISoundEngine_1a90b70abaae576b45ee062ea2e4380ea1" kindref="member">ISoundEngine::setSoundVolume()</ref>. ! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>0 (silent) to 1.0f (full volume). Default value is 1.0f. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1aa5b916f192c9625be74f6ca06d9e5f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>virtual ik_f32 irrklang::ISoundSource::getDefaultVolume</definition>
        <argsstring>()=0</argsstring>
        <name>getDefaultVolume</name>
        <briefdescription>
<para>Returns the default volume for a sound played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>You can influence this default volume value using <ref refid="classirrklang_1_1ISoundSource_1a52accb16b3a554558f12f99d16f57a7d" kindref="member">setDefaultVolume()</ref>. Note that the default volume is being multiplied with the master volume of <ref refid="classirrklang_1_1ISoundEngine" kindref="compound">ISoundEngine</ref>, change this via <ref refid="classirrklang_1_1ISoundEngine_1a90b70abaae576b45ee062ea2e4380ea1" kindref="member">ISoundEngine::setSoundVolume()</ref>. ! <simplesect kind="return"><para>0 (silent) to 1.0f (full volume). Default value is 1.0f. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundSource::setDefaultMinDistance</definition>
        <argsstring>(ik_f32 minDistance)=0</argsstring>
        <name>setDefaultMinDistance</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>minDistance</declname>
        </param>
        <briefdescription>
<para>sets the default minimal distance for 3D sounds played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>This value influences how loud a sound is heard based on its distance. See <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> for details about what the min distance is. This method only influences the initial distance value of sounds. For changing the distance while the sound is playing, use <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> and <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Default minimal distance for 3D sounds from this source. Set it to a negative value to let sounds of this source use the engine level default min distance, which can be set via <ref refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" kindref="member">ISoundEngine::setDefault3DSoundMinDistance()</ref>. Default value is -1, causing the default min distance of the sound engine to take effect. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a8f263cc21e42eabbd894d986bdafa90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>virtual ik_f32 irrklang::ISoundSource::getDefaultMinDistance</definition>
        <argsstring>()=0</argsstring>
        <name>getDefaultMinDistance</name>
        <briefdescription>
<para>Returns the default minimal distance for 3D sounds played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>This value influences how loud a sound is heard based on its distance. See <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> for details about what the minimal distance is. <simplesect kind="return"><para>Default minimal distance for 3d sounds from this source. If <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">setDefaultMinDistance()</ref> was set to a negative value, it will return the default value set in the engine, using <ref refid="classirrklang_1_1ISoundEngine_1a5bd71e2afec5482e94bfeb205748fdf8" kindref="member">ISoundEngine::setDefault3DSoundMinDistance()</ref>. Default value is -1, causing the default min distance of the sound engine to take effect. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a7d22ed6bb25eeb14fec844c02f7553ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundSource::setDefaultMaxDistance</definition>
        <argsstring>(ik_f32 maxDistance)=0</argsstring>
        <name>setDefaultMaxDistance</name>
        <param>
          <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
          <declname>maxDistance</declname>
        </param>
        <briefdescription>
<para>Sets the default maximal distance for 3D sounds played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>Changing this value is usually not necessary. Use <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">setDefaultMinDistance()</ref> instead. Don&apos;t change this value if you don&apos;t know what you are doing: This value causes the sound to stop attenuating after it reaches the max distance. Most people think that this sets the volume of the sound to 0 after this distance, but this is not true. Only change the minimal distance (using for example <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">setDefaultMinDistance()</ref>) to influence this. See <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref> for details about what the max distance is. This method only influences the initial distance value of sounds. For changing the distance while the sound is played, use <ref refid="classirrklang_1_1ISound_1a318bcb0ec6c44078cdee3c9b080b6f41" kindref="member">ISound::setMinDistance()</ref> and <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Default maximal distance for 3D sounds from this source. Set it to a negative value to let sounds of this source use the engine level default max distance, which can be set via <ref refid="classirrklang_1_1ISoundEngine_1a89a3ff86f692cff9613fe96e4c3480cc" kindref="member">ISoundEngine::setDefault3DSoundMaxDistance()</ref>. Default value is -1, causing the default max distance of the sound engine to take effect. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1af43bf5affba2a9758bfa3c4f367c32a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1a6fa5a4dd85b476308461136072ef4e0f" kindref="member">ik_f32</ref></type>
        <definition>virtual ik_f32 irrklang::ISoundSource::getDefaultMaxDistance</definition>
        <argsstring>()=0</argsstring>
        <name>getDefaultMaxDistance</name>
        <briefdescription>
<para>returns the default maxmial distance for 3D sounds played from this source. </para>        </briefdescription>
        <detaileddescription>
<para>This value influences how loud a sound is heard based on its distance. Changing this value is usually not necessary. Use <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">setDefaultMinDistance()</ref> instead. Don&apos;t change this value if you don&apos;t know what you are doing: This value causes the sound to stop attenuating after it reaches the max distance. Most people think that this sets the volume of the sound to 0 after this distance, but this is not true. Only change the minimal distance (using for example <ref refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" kindref="member">setDefaultMinDistance()</ref>) to influence this. See <ref refid="classirrklang_1_1ISound_1a571f0117ef904ddf994a8638bd2b72ce" kindref="member">ISound::setMaxDistance()</ref> for details about what the max distance is. <simplesect kind="return"><para>Default maximal distance for 3D sounds from this source. If <ref refid="classirrklang_1_1ISoundSource_1a7d22ed6bb25eeb14fec844c02f7553ce" kindref="member">setDefaultMaxDistance()</ref> was set to a negative value, it will return the default value set in the engine, using <ref refid="classirrklang_1_1ISoundEngine_1a89a3ff86f692cff9613fe96e4c3480cc" kindref="member">ISoundEngine::setDefault3DSoundMaxDistance()</ref>. Default value is -1, causing the default max distance of the sound engine to take effect. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a6dfe93f58c4443b9547e9b60abe18dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundSource::forceReloadAtNextUse</definition>
        <argsstring>()=0</argsstring>
        <name>forceReloadAtNextUse</name>
        <briefdescription>
<para>Forces the sound to be reloaded at next replay. </para>        </briefdescription>
        <detaileddescription>
<para>Sounds which are not played as streams are buffered to make it possible to replay them without much overhead. If the sound file is altered after the sound has been played the first time, the engine won&apos;t play the changed file then. Calling this method makes the engine reload the file before the file is played the next time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a434174ae21f4e43a480395e79fb2d4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void irrklang::ISoundSource::setForcedStreamingThreshold</definition>
        <argsstring>(ik_s32 thresholdBytes)=0</argsstring>
        <name>setForcedStreamingThreshold</name>
        <param>
          <type><ref refid="namespaceirrklang_1af8028b1c477e50d479270611ecb76e92" kindref="member">ik_s32</ref></type>
          <declname>thresholdBytes</declname>
        </param>
        <briefdescription>
<para>Sets the threshold size where irrKlang decides to force streaming a file independent of the user specified setting. </para>        </briefdescription>
        <detaileddescription>
<para>When specifying ESM_NO_STREAMING for playing back a sound file, irrKlang will ignore this setting if the file is bigger than this threshold and stream the file anyway. Please note that if an audio format loader is not able to return the size of a sound source and returns -1 as length, this will be ignored as well and streaming has to be forced. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>New threshold. The value is specified in uncompressed bytes and its default value is about one Megabyte. Set to 0 or a negative value to disable stream forcing. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a69bd50de0cb511389d273841936f8d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceirrklang_1af8028b1c477e50d479270611ecb76e92" kindref="member">ik_s32</ref></type>
        <definition>virtual ik_s32 irrklang::ISoundSource::getForcedStreamingThreshold</definition>
        <argsstring>()=0</argsstring>
        <name>getForcedStreamingThreshold</name>
        <briefdescription>
<para>Returns the threshold size where irrKlang decides to force streaming a file independent of the user specified setting. </para>        </briefdescription>
        <detaileddescription>
<para>The value is specified in uncompressed bytes and its default value is about one Megabyte. See <ref refid="classirrklang_1_1ISoundSource_1a434174ae21f4e43a480395e79fb2d4a9" kindref="member">setForcedStreamingThreshold()</ref> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classirrklang_1_1ISoundSource_1a7ea731f5136f0d7abfbe2e2436d4aa43" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* irrklang::ISoundSource::getSampleData</definition>
        <argsstring>()=0</argsstring>
        <name>getSampleData</name>
        <briefdescription>
<para>Returns a pointer to the loaded and decoded sample data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a pointer to the sample data. The data is provided in decoded PCM data. The exact format can be retrieved using <ref refid="classirrklang_1_1ISoundSource_1a4c24dd695accd2d2f0f6e00124af1cf4" kindref="member">getAudioFormat()</ref>. Use <ref refid="classirrklang_1_1ISoundSource_1a4c24dd695accd2d2f0f6e00124af1cf4" kindref="member">getAudioFormat()</ref>.getSampleDataSize() for getting the amount of bytes. The returned pointer will only be valid as long as the sound source exists. This function will only return a pointer to the data if the audio file is not streamed, namely ESM_NO_STREAMING. Otherwise this function will return 0. Note: If the sound never has been played before, the sound engine will have to open the file and decode audio data from there, so this call could take a bit depending on the type of the file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A sound source describes an input file (.ogg, .mp3, .wav or similar) and its default settings. </para>    </briefdescription>
    <detaileddescription>
<para>It provides some informations about the sound source like the play lenght and can have default settings for volume, distances for 3d etc. There is some example code on how to use Sound sources at <ref refid="index_1soundSources" kindref="member">Using Sound Sources</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="431">
        <label>irrklang::IVirtualRefCounted</label>
        <link refid="classirrklang_1_1IVirtualRefCounted"/>
      </node>
      <node id="430">
        <label>irrklang::ISoundSource</label>
        <link refid="classirrklang_1_1ISoundSource"/>
        <childnode refid="431" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="433">
        <label>irrklang::IVirtualRefCounted</label>
        <link refid="classirrklang_1_1IVirtualRefCounted"/>
      </node>
      <node id="432">
        <label>irrklang::ISoundSource</label>
        <link refid="classirrklang_1_1ISoundSource"/>
        <childnode refid="433" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="irrKlang-1.5.0/include/ik_ISoundSource.h" line="22" column="1" bodyfile="irrKlang-1.5.0/include/ik_ISoundSource.h" bodystart="21" bodyend="162"/>
    <listofallmembers>
      <member refid="classirrklang_1_1IVirtualRefCounted_1a6602c3d110f23410c5bca8a08b709aa4" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>drop</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a6dfe93f58c4443b9547e9b60abe18dff" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>forceReloadAtNextUse</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a4c24dd695accd2d2f0f6e00124af1cf4" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getAudioFormat</name></member>
      <member refid="classirrklang_1_1ISoundSource_1af43bf5affba2a9758bfa3c4f367c32a8" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getDefaultMaxDistance</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a8f263cc21e42eabbd894d986bdafa90f" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getDefaultMinDistance</name></member>
      <member refid="classirrklang_1_1ISoundSource_1aa5b916f192c9625be74f6ca06d9e5f30" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getDefaultVolume</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a69bd50de0cb511389d273841936f8d0f" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getForcedStreamingThreshold</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a6a608ded51f5920d0cb5d28ac6ee5455" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getIsSeekingSupported</name></member>
      <member refid="classirrklang_1_1ISoundSource_1afbd2d8ef903b106a8e9a332c0dd06693" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getName</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a23ff097b74d284529e4e1c75d0611884" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getPlayLength</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a7ea731f5136f0d7abfbe2e2436d4aa43" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getSampleData</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a5b1158611ec58ab372ef05de541fed56" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>getStreamMode</name></member>
      <member refid="classirrklang_1_1IVirtualRefCounted_1a1720491c5a3a511985903bfa3c829018" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>grab</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a7d22ed6bb25eeb14fec844c02f7553ce" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>setDefaultMaxDistance</name></member>
      <member refid="classirrklang_1_1ISoundSource_1af3a3635f94afc8bc03c9af5b3c408ac0" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>setDefaultMinDistance</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a52accb16b3a554558f12f99d16f57a7d" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>setDefaultVolume</name></member>
      <member refid="classirrklang_1_1ISoundSource_1a434174ae21f4e43a480395e79fb2d4a9" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>setForcedStreamingThreshold</name></member>
      <member refid="classirrklang_1_1ISoundSource_1aed0e4abae00be20497ccb905d2db7588" prot="public" virt="pure-virtual"><scope>irrklang::ISoundSource</scope><name>setStreamMode</name></member>
      <member refid="classirrklang_1_1IVirtualRefCounted_1a54ed4b2c2bf1fd7666f7d78a9e768612" prot="public" virt="virtual"><scope>irrklang::ISoundSource</scope><name>~IVirtualRefCounted</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
